{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../server/server.component\";\nconst _c0 = [\"app-servers\", \"\"];\nfunction ServersComponent_p_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.serverCreationStatus);\n  }\n}\nfunction ServersComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"No server was created!\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ServersComponent {\n  constructor() {\n    this.allowNewServer = false;\n    this.serverCreationStatus = \"No server was created\";\n    this.serversCreated = 0;\n    this.serverName = \"TestServer\";\n    this.serverCreated = false;\n    console.log(\"Hola, me he creado!\");\n    setTimeout(() => {\n      this.allowNewServer = true;\n    }, 5000);\n  }\n  ngOnInit() {}\n  onCreateServer() {\n    this.serverCreated = true;\n    this.serversCreated++;\n    this.serverCreationStatus = `Server was created! Name is ${this.serverName}. Servers created: ${this.serversCreated}`;\n  }\n  onUpdateServerName(event) {\n    this.serverName = event.target.value; //Casteo de TS;\n  }\n}\n\nServersComponent.ɵfac = function ServersComponent_Factory(t) {\n  return new (t || ServersComponent)();\n};\nServersComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ServersComponent,\n  selectors: [[\"\", \"app-servers\", \"\"]],\n  attrs: _c0,\n  decls: 12,\n  vars: 3,\n  consts: [[\"type\", \"text\", 1, \"form-control\", \"w-25\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\", \"mb-2\", \"mt-1\", 3, \"disabled\", \"click\"], [4, \"ngIf\"], [\"noServer\", \"\"]],\n  template: function ServersComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"label\");\n      i0.ɵɵtext(1, \"Server Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"input\", 0);\n      i0.ɵɵlistener(\"ngModelChange\", function ServersComponent_Template_input_ngModelChange_2_listener($event) {\n        return ctx.serverName = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function ServersComponent_Template_button_click_3_listener() {\n        return ctx.onCreateServer();\n      });\n      i0.ɵɵtext(4, \"Add Server\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, ServersComponent_p_5_Template, 2, 1, \"p\", 2);\n      i0.ɵɵtemplate(6, ServersComponent_ng_template_6_Template, 2, 0, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelement(8, \"app-server\")(9, \"app-server\")(10, \"app-server\")(11, \"app-server\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.serverName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", !ctx.allowNewServer);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.serverCreated);\n    }\n  },\n  dependencies: [i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.ServerComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;IAUAA,yBAAyB;IAAAA,YAAwB;IAAAA,iBAAI;;;;IAA5BA,eAAwB;IAAxBA,iDAAwB;;;;;IAE7CA,yBAAG;IAAAA,sCAAsB;IAAAA,iBAAI;;;ACFjC,OAAM,MAAOC,gBAAgB;EAO3BC;IANA,mBAAc,GAAG,KAAK;IACtB,yBAAoB,GAAG,uBAAuB;IACtC,mBAAc,GAAG,CAAC;IAC1B,eAAU,GAAG,YAAY;IACzB,kBAAa,GAAG,KAAK;IAGnBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAChCC,UAAU,CAAC,MAAK;MACd,IAAI,CAACC,cAAc,GAAG,IAAI;IAC5B,CAAC,EAAE,IAAI,CAAC;EACZ;EAEAC,QAAQ,IAER;EAEAC,cAAc;IACZ,IAAI,CAACC,aAAa,GAAG,IAAI;IACzB,IAAI,CAACC,cAAc,EAAE;IACrB,IAAI,CAACC,oBAAoB,GAAG,+BAA+B,IAAI,CAACC,UAAU,sBAAsB,IAAI,CAACF,cAAc,EAAE;EACvH;EAEAG,kBAAkB,CAACC,KAAY;IAC7B,IAAI,CAACF,UAAU,GAAsBE,KAAK,CAACC,MAAO,CAACC,KAAK,CAAC,CAAC;EAC5D;;;AA1BWf,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;QAAhBA,gBAAgB;EAAAgB;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDP7BtB,6BAAO;MAAAA,2BAAW;MAAAA,iBAAQ;MAE1BA,gCAAsE;MAAzBA;QAAA;MAAA,EAAwB;MAArEA,iBAAsE;MAEtEA,iCAAkG;MAA7DA;QAAA,OAASuB,oBAAgB;MAAA,EAAC;MAAmCvB,0BAAU;MAAAA,iBAAS;MAGrHA,6DAAqD;MACrDA,kHAEc;MACdA,6BAAyB;;;MAToBA,eAAwB;MAAxBA,wCAAwB;MAE7DA,eAA4B;MAA5BA,8CAA4B;MAGhCA,eAAmB;MAAnBA,wCAAmB","names":["i0","ServersComponent","constructor","console","log","setTimeout","allowNewServer","ngOnInit","onCreateServer","serverCreated","serversCreated","serverCreationStatus","serverName","onUpdateServerName","event","target","value","selectors","attrs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\adrim\\Documents\\Cursos Udemy\\Curso Angular\\Angular-Udemy\\src\\app\\servers\\servers.component.html","C:\\Users\\adrim\\Documents\\Cursos Udemy\\Curso Angular\\Angular-Udemy\\src\\app\\servers\\servers.component.ts"],"sourcesContent":["<!--Property Binding con [property] = \"variable\". Vinculamos dinámicamente el valor de la propiedad html a una variable.-->\r\n<!--Event Binding con (tipo de evento) = \"Código que se ejecuta\". En este tipo de Binding, $event serán los datos emitidos por el evento (objeto de tipo evento)-->\r\n<!--Two-Way-Binding con [(value)]. Para Two-Way-Binding hace falta habilitar ngModel añadiendo FormsMudle al array imports[] de AppModule-->\r\n<label>Server Name</label>\r\n<!--<input type=\"text\" class=\"form-control w-25\" (input)=\"onUpdateServerName($event)\">-->\r\n<input type=\"text\" class=\"form-control w-25\" [(ngModel)]=\"serverName\">\r\n<!--<p>{{serverName}}</p>-->\r\n<button [disabled]=\"!allowNewServer\" (click)=\"onCreateServer()\" class=\"btn btn-primary mb-2 mt-1\">Add Server</button>\r\n<!--<p>{{serverCreationStatus}}</p>-->\r\n<!--*ngIf es una directiva estructual porque cambia la estructura del dom. Por ser estructurtal lleva * antes. Añade el elemento o no dependiendo de la condición dada que devuelva true o false.-->\r\n<p *ngIf=\"serverCreated\">{{serverCreationStatus}}</p>\r\n<ng-template #noServer>\r\n    <p>No server was created!</p>\r\n</ng-template> <!--ng-template es una directiva de envio que sirve para marcas tags del DOM. #name es un marcador.-->\r\n<app-server></app-server>\r\n<app-server></app-server>\r\n<app-server></app-server>\r\n<app-server></app-server>","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: '[app-servers]', //Selector de atributo de css.\r\n  templateUrl: './servers.component.html', //Archivo .html que contiene el código.\r\n  /*template: `  //Html directamente en este archivo. Mejor usar `` para poder espaciar.\r\n  <app-server></app-server>\r\n  <app-server></app-server>`,*/\r\n  styleUrls: ['./servers.component.css']\r\n})\r\nexport class ServersComponent {\r\n  allowNewServer = false;\r\n  serverCreationStatus = \"No server was created\";\r\n  private serversCreated = 0;\r\n  serverName = \"TestServer\";\r\n  serverCreated = false;\r\n\r\n  constructor(){\r\n    console.log(\"Hola, me he creado!\");\r\n      setTimeout(() => {\r\n        this.allowNewServer = true;\r\n      }, 5000)\r\n  }\r\n\r\n  ngOnInit(){\r\n\r\n  }\r\n\r\n  onCreateServer(){\r\n    this.serverCreated = true;\r\n    this.serversCreated++;\r\n    this.serverCreationStatus = `Server was created! Name is ${this.serverName}. Servers created: ${this.serversCreated}`;\r\n  }\r\n\r\n  onUpdateServerName(event: Event){\r\n    this.serverName = (<HTMLInputElement>event.target).value; //Casteo de TS;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}